project
  Main.hs                                                                       # Basically empty

  ModelChecker.hs                                                               # Regular model checker
    types
      Agent = String
      Proposition = int
      Assignment = [Proposition]
    Data
      Formula (Top, Bot, P, Neg, Con, Dis, Imp, Bim, Kno, Ann)
      Model ( Mo [(Int, Assignment)] [( Agent, [[Int]] )] )
    functions
      ann :: Formula -> Formula -> Formula
      myLookup :: Eq a => a -> [(a,b)] -> Maybe b
      unsafeLookup :: Eq a => a -> [(a,b)] -> b
      worldsOf :: Model -> [Int]
      (|=) isTrue :: (Model, Int) -> Formula -> Bool
      localState :: (Model, Int) -> Agent -> [Int]
      (!) publicAnnounce :: Model -> Formula -> ModelChecker
      knowWhether :: Agent -> Formula -> Formula
  ThreeMuddyChildren.hs                                                         # 3 Muddy Children model for regular model checker
    variables
      muddyModel :: Model
      worldSpace :: [(Int, Assignment)]
      childrenRelations :: [ (Agent, [[Int]]) ]
      mudyChild0, 1, 2 :: Agent
      isMuddy0, 1, 2 :: proposition
      atLeastOneMuddy :: formula
      nobodyKnows ............
    functions
      muddyAfter :: Int -> Model

  NMuddyChildren                                                                # N Muddy Children model for regular model checker

  Succinct.hs                                                                   # Succinct model checker

  Translator.hs                                                                 # translates models to different representations

  Spec.hs                                                                       # Testing
